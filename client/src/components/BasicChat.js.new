import React, { useState, useRef, useEffect, useCallback } from 'react';
import { motion } from 'framer-motion';
import { Send, ArrowLeft, Bot, User, Loader2, UploadCloud, Link as LinkIcon, FileText } from 'lucide-react';
import { Link } from 'react-router-dom';
import toast from 'react-hot-toast';
import { apiRequest, ENDPOINTS } from '../config/api';
import { useDropzone } from 'react-dropzone';

const BasicChat = () => {
  const [messages, setMessages] = useState([
    {
      id: 1,
      type: 'ai',
      content: "Hello! I'm your AI tutor. I'm here to help you with any questions you might have. First, please provide a learning source: a file, a link, or raw text.",
      timestamp: new Date()
    }
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [sourceProvided, setSourceProvided] = useState(false);
  const [sourceType, setSourceType] = useState(null);
  const [sourceFile, setSourceFile] = useState(null);
  const [sourceLink, setSourceLink] = useState('');
  const [sourceText, setSourceText] = useState('');
  const [isProcessingSource, setIsProcessingSource] = useState(false);
  const [sessionId, setSessionId] = useState(null);
  const messagesEndRef = useRef(null);

  const scrollToBottom = useCallback(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, []);

  useEffect(() => {
    scrollToBottom();
  }, [messages, scrollToBottom]);

  const onDrop = useCallback((acceptedFiles) => {
    if (acceptedFiles.length > 0) {
      setSourceFile(acceptedFiles[0]);
      setSourceType('file');
      toast.success(`File selected: ${acceptedFiles[0].name}`);
    }
  }, []);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      'application/pdf': ['.pdf'],
      'text/plain': ['.txt'],
      'text/markdown': ['.md'],
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx'],
    },
    multiple: false,
  });

  const handleSendMessage = async () => {
    if (!inputValue.trim() || isLoading) return;

    const userMessage = {
      id: Date.now(),
      type: 'user',
      content: inputValue.trim(),
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    const messageContent = inputValue.trim();
    setInputValue('');
    setIsLoading(true);

    try {
      const requestBody = {
        message: messageContent,
        sessionId: sessionId,
        context: sourceType === 'text' && sourceText ? sourceText : undefined
      };

      const data = await apiRequest(ENDPOINTS.CHAT.BASIC, {
        method: 'POST',
        body: JSON.stringify(requestBody)
      });
      
      const aiResponse = {
        id: Date.now() + 1,
        type: 'ai',
        content: data.reply || 'I\'m not sure how to respond to that. Could you rephrase your question?',
        timestamp: new Date()
      };
      
      setMessages(prev => [...prev, aiResponse]);
    } catch (error) {
      console.error('API Error:', error);
      toast.error('Error sending message. Please try again.');
      
      const aiResponse = {
        id: Date.now() + 1,
        type: 'ai',
        content: 'I apologize, but I encountered an error processing your request. Please try again in a moment.',
        timestamp: new Date()
      };
      setMessages(prev => [...prev, aiResponse]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyDown = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const handleProcessSource = async () => {
    if (!sourceType || isProcessingSource) return;

    setIsProcessingSource(true);
    toast.loading('Processing your source...');

    const formData = new FormData();
    let endpoint = '';

    try {
      if (sourceType === 'file' && sourceFile) {
        formData.append('sourceType', 'file');
        formData.append('file', sourceFile);
        endpoint = ENDPOINTS.SOURCES.UPLOAD;
      } else if (sourceType === 'link' && sourceLink.trim()) {
        formData.append('sourceType', 'link');
        formData.append('link', sourceLink.trim());
        endpoint = ENDPOINTS.SOURCES.UPLOAD;
      } else if (sourceType === 'text' && sourceText.trim()) {
        formData.append('sourceType', 'text');
        formData.append('text', sourceText.trim());
        endpoint = ENDPOINTS.SOURCES.UPLOAD;
      } else {
        toast.error('Please provide a valid source input.');
        setIsProcessingSource(false);
        return;
      }

      const data = await apiRequest(endpoint, {
        method: 'POST',
        body: formData,
        isFormData: true,
      });

      if (data.sessionId) {
        setSessionId(data.sessionId);
        setSourceProvided(true);
        setMessages(prev => [
          ...prev,
          {
            id: Date.now() + 2,
            type: 'ai',
            content: `Great! I've processed your ${sourceType}. What questions do you have about it?`,
            timestamp: new Date()
          }
        ]);
        toast.dismiss();
        toast.success('Source processed successfully! You can now ask questions.');
      } else {
        throw new Error(data.message || 'Failed to process source.');
      }
    } catch (error) {
      console.error('Source processing error:', error);
      toast.dismiss();
      toast.error(error.message || 'Failed to process source. Please try again.');
    } finally {
      setIsProcessingSource(false);
    }
  };

  const renderSourceInput = () => {
    if (sourceProvided) return null;

    return (
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6">
        <h3 className="text-lg font-medium text-gray-900 mb-4">Add Learning Source</h3>
        <div className="space-y-4">
          {/* File Upload */}
          <div className="flex items-center space-x-3">
            <input
              type="radio"
              id="file-source"
              name="source-type"
              className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300"
              checked={sourceType === 'file'}
              onChange={() => setSourceType('file')}
            />
            <label htmlFor="file-source" className="flex-1">
              <div 
                {...getRootProps()}
                className={`p-4 border-2 border-dashed rounded-md cursor-pointer ${
                  sourceType === 'file' 
                    ? 'border-blue-500 bg-blue-50' 
                    : 'border-gray-300 hover:border-gray-400'
                } ${isDragActive ? 'border-blue-500 bg-blue-50' : ''}`}
              >
                <input {...getInputProps()} />
                <div className="flex flex-col items-center justify-center space-y-2">
                  <UploadCloud className={`w-6 h-6 ${
                    sourceType === 'file' || isDragActive ? 'text-blue-500' : 'text-gray-400'
                  }`} />
                  <span className="text-sm font-medium">
                    {isDragActive ? 'Drop the file here' : 'Upload a document'}
                  </span>
                  <span className="text-xs text-gray-500">PDF, DOCX, or TXT (max 10MB)</span>
                  {sourceFile && (
                    <span className="text-xs text-blue-600 mt-1">
                      Selected: {sourceFile.name}
                    </span>
                  )}
                </div>
              </div>
            </label>
          </div>

          {/* Link Input */}
          <div className="flex items-center space-x-3">
            <input
              type="radio"
              id="link-source"
              name="source-type"
              className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300"
              checked={sourceType === 'link'}
              onChange={() => setSourceType('link')}
            />
            <div className="flex-1">
              <label htmlFor="link-input" className="block text-sm font-medium text-gray-700 mb-1">
                Or enter a webpage URL
              </label>
              <div className="flex rounded-md shadow-sm">
                <span className="inline-flex items-center px-3 rounded-l-md border border-r-0 border-gray-300 bg-gray-50 text-gray-500 text-sm">
                  <LinkIcon className="h-4 w-4" />
                </span>
                <input
                  type="url"
                  id="link-input"
                  className={`flex-1 min-w-0 block w-full px-3 py-2 rounded-none rounded-r-md border ${
                    sourceType === 'link' ? 'border-blue-500 ring-1 ring-blue-500' : 'border-gray-300'
                  } focus:ring-blue-500 focus:border-blue-500 sm:text-sm`}
                  placeholder="https://example.com"
                  value={sourceLink}
                  onChange={(e) => setSourceLink(e.target.value)}
                  disabled={sourceType !== 'link'}
                />
              </div>
            </div>
          </div>

          {/* Text Input */}
          <div className="flex items-start space-x-3">
            <input
              type="radio"
              id="text-source"
              name="source-type"
              className="h-4 w-4 mt-2 text-blue-600 focus:ring-blue-500 border-gray-300"
              checked={sourceType === 'text'}
              onChange={() => setSourceType('text')}
            />
            <div className="flex-1">
              <label htmlFor="text-input" className="block text-sm font-medium text-gray-700 mb-1">
                Or paste your text here
              </label>
              <textarea
                id="text-input"
                rows={4}
                className={`shadow-sm focus:ring-blue-500 focus:border-blue-500 block w-full sm:text-sm border ${
                  sourceType === 'text' ? 'border-blue-500 ring-1 ring-blue-500' : 'border-gray-300'
                } rounded-md`}
                placeholder="Paste your text here..."
                value={sourceText}
                onChange={(e) => setSourceText(e.target.value)}
                disabled={sourceType !== 'text'}
              />
            </div>
          </div>

          {/* Process Button */}
          <div className="pt-2">
            <button
              type="button"
              onClick={handleProcessSource}
              disabled={isProcessingSource || !sourceType || 
                (sourceType === 'file' && !sourceFile) || 
                (sourceType === 'link' && !sourceLink.trim()) || 
                (sourceType === 'text' && !sourceText.trim())
              }
              className={`w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white ${
                isProcessingSource || !sourceType || 
                (sourceType === 'file' && !sourceFile) || 
                (sourceType === 'link' && !sourceLink.trim()) || 
                (sourceType === 'text' && !sourceText.trim())
                  ? 'bg-blue-300 cursor-not-allowed' 
                  : 'bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500'
              }`}
            >
              {isProcessingSource ? (
                <>
                  <Loader2 className="animate-spin -ml-1 mr-2 h-4 w-4" />
                  Processing...
                </>
              ) : (
                'Process Source'
              )}
            </button>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b border-gray-100">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex items-center justify-between">
            <Link
              to="/"
              className="flex items-center space-x-2 text-gray-600 hover:text-blue-600 transition-colors duration-200"
            >
              <ArrowLeft className="w-5 h-5" />
              <span>Back to Home</span>
            </Link>
            <div className="text-center">
              <h1 className="text-xl font-semibold text-gray-900">StudyGenie Chat</h1>
              <p className="text-sm text-gray-500">AI-powered learning assistant</p>
            </div>
            <div className="w-20"></div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        {/* Source Input Section */}
        {renderSourceInput()}

        {/* Chat Messages */}
        <div className="mb-24">
          <div className="space-y-4">
            {messages.map((message) => (
              <motion.div
                key={message.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                <div
                  className={`max-w-3xl rounded-2xl px-4 py-3 ${
                    message.type === 'user'
                      ? 'bg-blue-600 text-white rounded-br-none'
                      : 'bg-white border border-gray-200 rounded-bl-none'
                  }`}
                >
                  <div className="flex items-start space-x-2">
                    {message.type === 'ai' && (
                      <div className="flex-shrink-0 bg-blue-100 p-1.5 rounded-full">
                        <Bot className="w-5 h-5 text-blue-600" />
                      </div>
                    )}
                    <div className="prose prose-sm max-w-none">
                      {message.content.split('\n').map((paragraph, i) => (
                        <p key={i}>{paragraph}</p>
                      ))}
                    </div>
                    {message.type === 'user' && (
                      <div className="flex-shrink-0 bg-blue-100 p-1.5 rounded-full">
                        <User className="w-5 h-5 text-blue-600" />
                      </div>
                    )}
                  </div>
                  <div className="text-xs mt-1 text-right opacity-70">
                    {new Date(message.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                  </div>
                </div>
              </motion.div>
            ))}
            <div ref={messagesEndRef} />
          </div>
        </div>

        {/* Input Area */}
        <div className="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 py-4 px-4">
          <div className="max-w-4xl mx-auto">
            <div className="relative">
              <textarea
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                onKeyDown={handleKeyDown}
                placeholder={sourceProvided ? "Type your message..." : "Please provide a learning source first"}
                disabled={!sourceProvided || isLoading}
                className={`w-full pr-12 pl-4 py-3 border border-gray-300 rounded-full focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                  !sourceProvided ? 'bg-gray-100 cursor-not-allowed' : ''
                }`}
                rows="1"
                style={{ resize: 'none' }}
              />
              <button
                onClick={handleSendMessage}
                disabled={!sourceProvided || !inputValue.trim() || isLoading}
                className={`absolute right-2 bottom-2 p-2 rounded-full ${
                  !sourceProvided || !inputValue.trim()
                    ? 'text-gray-400 cursor-not-allowed'
                    : 'text-blue-600 hover:bg-blue-50'
                }`}
              >
                {isLoading ? (
                  <Loader2 className="w-5 h-5 animate-spin" />
                ) : (
                  <Send className="w-5 h-5" />
                )}
              </button>
            </div>
            {!sourceProvided && (
              <p className="mt-2 text-sm text-center text-gray-500">
                Please add a learning source above to start chatting
              </p>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default BasicChat;
